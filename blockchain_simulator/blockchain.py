from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Dict, Type, TYPE_CHECKING

if TYPE_CHECKING:
    from blockchain_simulator.block import BlockBase
    from blockchain_simulator.node import NodeBase

# ============================
# BLOCKCHAIN ABSTRACT CLASS
# ============================

class BlockchainBase(ABC):
    """Abstract class for defining custom blockchain implementations."""
    
    def __init__(self, block_class: Type['BlockBase'], owner_node: 'NodeBase'):
        self.blocks: Dict[int, 'BlockBase'] = {}  # Maps block_id to Block object.
        self.block_class: Type['BlockBase'] = block_class
        self.genesis: 'BlockBase' = self.create_genesis_block()
        self.owner: 'NodeBase' = owner_node                 #stores the node that owns the blockchain object
        self.head = self.genesis                      # Stores the head of the main chain for this node.
        
    @abstractmethod
    def create_genesis_block(self) -> 'BlockBase':
        """Creates the genesis block."""
        pass

    @abstractmethod
    def add_block(self, block: 'BlockBase'):
        """Adds a block generated by the owner node to the blockchain."""
        pass

    
    def add_received_block(self, block: 'BlockBase', is_proposer: bool):
        """ Adds a block that is the output of consensus protocol"""

        if(is_proposer):
            self.add_block(block)
            return 

        if(block.parent.block_id in self.blockchain.blocks):
            self.blockchain.blocks[block.parent.block_id].add_child(block)
            self.head = self.owner.consensus_protocol.select_best_block(self)

# ============================
# BLOCKCHAIN IMPLEMENTATION
# ============================

class BasicBlockchain(BlockchainBase):
    """Basic blockchain implementation."""

    def __init__(self, block_class: Type['BlockBase']):
        super().__init__(block_class)

    def create_genesis_block(self) -> 'BlockBase':
        """Creates a genesis block."""
        genesis = self.block_class(block_id=0, miner_id=1, timestamp=0)
        self.blocks[0] = genesis
        return genesis

    def add_block(self, block: 'BlockBase'):
        """Adds a block and updates the weight.
        Assumes parents are properly linked to block
        """

    
        self.blocks[block.block_id] = block
        head = self.head                        #head stores the head of the main chain where the 'block' is to be added
        head.children.add_child(block)
        self.head = block                       #make the newly added block the head of the main chain

        # block.parent.children.append(block) # Assume all parents have blocks because genesis block must have been created already